[core]
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	editor = vim
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[alias]
	l = log --pretty=format:\"%C(yellow) %h %Creset %ad %C(magenta bold)%d%Creset %s %C(green)(%an)%Creset\" -n 100 --graph --abbrev-commit --decorate --date="short"
	st = status
	sts = status -s
	br = branch
	co = checkout
	log-pretty = log --pretty=format:\"%C(yellow) %h %Creset %ad %C(magenta bold)%d%Creset %s %C(green)(%an)%Creset\"
	# Shortcuts for rebasing
	rbm = rebase -i origin/master
	rba = rebase --abort
	rbc = rebase --continue
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# List tags
	tags = tag -l
	# List remotes
	remotes = remote -v
	# Add another author to a commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h %Cblue%ad %Creset%s%Cgreen [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h %Cblue%ad %Creset%s%Cgreen [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# Commit all changes
	ca = !git add -A && git commit -asv
	# Push and set upstream
	po = !git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)
	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD
	# List contributors for the repo with number of commits
	contributors = shortlog --summary --numbered
	# Reverts the latest merge
	undo-merge = "reset --merge ORIG_HEAD"
	# Gives back the name of the current branch
	current-branch = "!f() { git rev-parse --abbrev-ref HEAD; }; f"
	# Moves every staged file to unstaged
	unstage = "reset HEAD"
	# Removes every untracked file
	remove-untracked = "!f() { git st -s | grep ?? | sed s/'?? '// | xargs rm -r; }; f"
	delete-untracked = "!f() { git st -s | grep ?? | sed s/'?? '// | xargs rm -r; }; f"
	# Adds a foo-bar commit with the latest changes
	# Note! This one is passing the commit hooks!
	wip = "!f() { git add -A; git commit -nm 'Wip'; }; f"
	wip-continue = "!f() { git reset HEAD^; }; f"
	# Shows only the merge commits to the master branch
	l-merges = "!f() { git l --merges --grep='Merge pull request'; }; f"
	# Shows which files are conflicting
	conflicted-files = "!f() { git diff --name-only --diff-filter=U; }; f"
	# Shows which files were modified in the current branch
	changed = "!f() { if [ -z $1 ]; then branch=$(git current-branch); else branch=$1; fi; git diff --name-only $branch $(git merge-base $branch master); }; f"
	# Shows differences of the current branch relative to the master
	diff-to-master = "!f() { git diff master $(git current-branch) -- $1; }; f"
	# Shows branches belonging with to a user
	# E.g. `$ git branches-of Levente`
	branches-of = "!f() { git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n | grep origin | grep -i $1; }; f"
	# Tidying up commits on a branch that are not pushed yet.
	# This is only rebasing commits that are ahead of the upstream version,
	# so it won't fuck up GitHub history and comments
	tidy = "!f() { remote_branch=`git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null`; if [[ -z \"$remote_branch\" ]] ; then echo 'There is no upstream branch set.' ; else git rebase -i $remote_branch $@; fi ; } ; f "
	# Gives back the last commit's message
	commit-message = "!f() { echo `git log -1 --pretty=%B`; }; f"
	# Open edited files
	open-edited = "!f() { git status --short | sed s/' M '// | xargs code -r; }; f"
	# Casumo Specific aliases
	#------------------------
	# Returns the issue number
	issue-number = "!f() { git current-branch | sed -n 's/.*\\(iss[0-9]*\\).*/\\1/p' | sed 's/iss//'; }; f"
	# Creates a commit stamp
	commit-stamp = "!f() { echo \"Casumo/Home#$(git issue-number)\"; }; f"
	# Adds a commit stamp to the latest commit
	append-commit-stamp = "!f() { if [[ \"$(git commit-message)\" != *\"$1\"* ]] ; then git commit --amend -m \"$(git commit-message)\" -m \"$1\"; fi; }; f"
	# Adds commit stamps to all of the commits that are not pushed yet
	apply-stamps = "! source ~/.aliases; f() { remote_branch=`git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null`; if [[ -z $remote_branch ]] ; then read -p 'No upstream branch found. Rebase to origin/master instad? (Y/n) ' -n 1 -r; echo; if [[ ! $REPLY =~ ^[Nn]$ ]]; then remote_branch='origin/master'; else exit; fi; fi; git rebase -i $remote_branch --exec=\"git append-commit-stamp '$(git commit-stamp)'\"; } ; f "
	# Opens the issue for the current branch
	open-issue = "!f() { open \"https://github.com/Casumo/Home/issues/$(git issue-number)\"; }; f"
	issue = "!f() { git open-issue; }; f"
	# Remove all local branches that were removed on remote
	remove-gone = "git branch -vv | grep ' gone]' | awk '{print $1}' | xargs git branch -d"
[commit]
	template = ~/.stCommitMsg
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[url "git@github.com:"]
	insteadOf = https://github.com/
[user]
	name = Jack Westbrook
	email = jack.westbrook@gmail.com
